call plug#begin('~/.vim/plugged')

" nerd tree file explorer
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'NLKNguyen/pipe.vim'
Plug 'NLKNguyen/pipe-mysql.vim'
Plug 'blueyed/vim-qf_resize'
Plug 'tommcdo/vim-exchange'
Plug 'tommcdo/vim-fugitive-blame-ext'
" linting
Plug 'dense-analysis/ale'
" theme
Plug 'NLKNguyen/papercolor-theme'
" speaks for itself
Plug 'tpope/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
" comment toggling
Plug 'tpope/vim-commentary'
" surround things with things
Plug 'tpope/vim-surround'
" nice minimal/pluggable statusline
Plug 'tpope/vim-flagship'
" vim and git make love
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'shumphrey/fugitive-gitlab.vim'
" enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'
" pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'
" gist magic
Plug 'mattn/gist-vim'
" vim interface to web api, gist-vim depends on it
Plug 'mattn/webapi-vim'
" fuzzy file searching
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-classpath'
" show vim status in gutter
Plug 'airblade/vim-gitgutter'
" navigate tmux and vim splits seamlessly
Plug 'christoomey/vim-tmux-navigator'
" enable text object user plugins
Plug 'kana/vim-textobj-user'
" ae/ie for the entire region of the current buffer
Plug 'kana/vim-textobj-entire'

call plug#end()

set nocompatible

" leader
let mapleader=','

filetype plugin on

filetype indent plugin on

" editing prefs
set tabstop=2
set smarttab
set autoindent
set smartindent
set shiftwidth=2
set shiftround
set ignorecase
set smartcase
set nohlsearch
set incsearch
set expandtab
set ai
set copyindent
set nowrap
set ruler
set backspace=eol,start,indent
set cmdwinheight=15

set hidden
set cursorline
set colorcolumn=80
set history=1000
set nofoldenable
set list
" make split direction more natural (or, like tmux at least)
set splitbelow
set splitright
" NOTE here we map literal characters to something
"      hopefully more palatable
set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.
set tabstop=4
set expandtab
" NOTE turned off by default because it breaks indentation
" set paste
set pastetoggle=<F2>
set number
" recommended by flagship
set laststatus=2
set showtabline=2
set guioptions-=e

" no arrow keys!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" more history
set history=200

" backups
" via http://www.gmarks.org/vi_backups.html
set backup
set writebackup
" some nice naming, places them all in a single directory with a boatload of
" metadata in the file name.
au BufWritePre * let &backupext = '%' . substitute(expand("%:p:h"), "/" , "%" , "g") . "%" . strftime("%Y.%m.%d.%H.%M.%S")
au VimLeave * !cp % ~/.vim/backups/$(echo %:p | sed 's/\(.*\/\)\(.*\)/\2\/\1/g' | sed 's/\//\%/g')$(date +\%Y.\%m.\%d.\%H.\%M.\%S).wq
" backup files
set backupdir=~/.vim/backups/
" swap files
set directory=./.vim/backups,/tmp

" next buffer
nnoremap <silent> <S-Tab> :bp<CR>
nnoremap <silent> <Tab> :bn<CR>

" quick save
noremap <Leader>m :update<CR>
" quick save + quit
noremap <Leader>n :update<CR>:quit<CR>

" a binding for closing things, closes:
" * the current buffer :bd
" * the quickfix list :lclose
noremap Q :bd<CR>:lclose<CR>

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" colors
syntax enable
syntax on
set t_Co=256
set background=dark
colorscheme PaperColor

" NERDTree
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
nmap <silent> <Space> :NERDTreeToggle<CR>

" setup gist
let g:gist_show_privates = 1
let g:gist_post_private = 1
let g:gist_detect_filetype = 1
let g:gist_get_multiplefile = 1

" setup vim markdown
let g:vim_markdown_folding_disabled=1

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" linting
let g:ale_fixers = {'javascript': ['prettier-standard', 'prettier'], 'typescript': ['prettier']}
let g:ale_linters = {'javascript': ['prettier-standard'], 'typescript': []}
let g:ale_fix_on_save = 1
let g:ale_list_window_size = 5

" Highlight tsx
augroup SyntaxSettings
    autocmd!
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript
augroup END
