set nocompatible

" leader
let mapleader=','

" pathogen
filetype plugin on

call pathogen#helptags()
call pathogen#infect()

filetype indent plugin on

" editing prefs
set tabstop=2
set smarttab
set autoindent
set smartindent
set shiftwidth=2
set shiftround
set ignorecase
set smartcase
set nohlsearch
set incsearch
set expandtab
set ai
set copyindent
set wrap
set ruler
set backspace=eol,start,indent
set cmdwinheight=15

set hidden
set cursorline
set colorcolumn=80
set history=1000
set nofoldenable
set list
" make split direction more natural (or, like tmux at least)
set splitbelow
set splitright
" NOTE here we map literal characters to something
"      hopefully more palatable
set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.
set tabstop=4
set expandtab
" NOTE turned off by default because it breaks indentation
" set paste
set pastetoggle=<F2>
set number
" recommended by flagship
" https://github.com/tpope/vim-flagship/blob/master/doc/flagship.txt
set laststatus=2
set showtabline=2
set guioptions-=e

" no arrow keys!
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" backups
" via http://www.gmarks.org/vi_backups.html
set backup
set writebackup
" some nice naming, places them all in a single directory with a boatload of
" metadata in the file name.
au BufWritePre * let &backupext = '%' . substitute(expand("%:p:h"), "/" , "%" , "g") . "%" . strftime("%Y.%m.%d.%H.%M.%S")
au VimLeave * !cp % ~/.vim/backups/$(echo %:p | sed 's/\(.*\/\)\(.*\)/\2\/\1/g' | sed 's/\//\%/g')$(date +\%Y.\%m.\%d.\%H.\%M.\%S).wq
" backup files
set backupdir=~/.vim/backups/
" swap files
set directory=./.vim/backups,/tmp

" colors
syntax enable
syntax on
set t_Co=256
set background=dark
colors lucius

" delete all buffers
nnoremap <Leader>! :1,999bd<CR>

" next buffer
nnoremap <silent> <S-Tab> :bp<CR>
nnoremap <silent> <Tab> :bn<CR>

" quick save
noremap <Leader>m :update<CR>
" quick save + quit
noremap <Leader>n :update<CR>:quit<CR>

noremap <Leader>j :cprev<CR>
noremap <Leader>k :cnext<CR>

" a binding for closing things, closes:
" * the current buffer :bd
" * the quickfix list :lclose
noremap Q :bd<CR>:lclose<CR>

" setup gist
let g:gist_show_privates = 1
let g:gist_post_private = 1
let g:gist_detect_filetype = 1
let g:gist_get_multiplefile = 1

" more history
set history=200

" better history scrolling
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" easy splitting
nnoremap <silent> vv :vsplit<CR>
nnoremap <silent> ff :split<CR>

" make doing things with git and github easier
nnoremap <silent> <leader>B <CR>:Gbrowse<CR>
nnoremap <silent> <leader>G :Gist<CR>

" some shortcuts for file navigation
nnoremap <silent> <leader>e :Explore<CR>
nnoremap <silent> <space> :e.<CR>

" setup vim markdown
let g:vim_markdown_folding_disabled=1

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " bind K to grep word under cursor with Ag
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
endif

" hide directories named `dist` from Ctrl+P
" unsure why we have to since it should get .gitignored anyway
" also should try now that we have `ag` in place, which respects
" gitignore pretty well
set wildignore+=*/dist/*

" let .gitignore mark a project boundary
let g:ctrlp_root_markers = ['.gitignore']

if executable('ag')
  " let `ag` be the matcher for ctrlp
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" NERDTree
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
nmap <silent> <Space> :NERDTreeToggle<CR>

" toggle all gutters
nnoremap <leader>g :GitGutterToggle<CR>:set nonumber!<CR>

" fix clipboard on sierra
" See https://stackoverflow.com/questions/39645253/clipboard-failure-in-tmux-vim-after-upgrading-to-macos-sierra
set clipboard+=unnamed

" js stuff
let g:jsx_ext_required = 0
let g:javascript_plugin_flow = 1
